{"version":3,"sources":["Components/Voltar/index.jsx","Components/Screen/index.jsx","Components/TitleTime/index.jsx","Components/CountDown/index.jsx","Pages/CountdownPage/index.jsx","img/logo.svg","Pages/SelectPage/index.jsx","Components/StopWatch/index.jsx","Pages/StopWatchPage/index.jsx","routes.jsx","App.js","reportWebVitals.js","index.js"],"names":["Voltar","className","to","Screen","props","children","TitleTime","count","Helmet","convertTime","hour","minute","second","Countdown","useState","inputControl","setInputControl","setCount","status","setStatus","pause","setPause","useEffect","constConvert","setTimeout","totalTime","timeCon","milisecond","Math","floor","handleTime","target","name","value","Number","type","placeholder","maxlength","onChange","onClick","CountdownPage","CountDown","SelectPage","src","logo","Stopwatch","shouldStart","setShouldStart","intervalID","setIntervalID","notRunning","setNotRunning","setInterval","clearInterval","StopwatchPage","Routes","basename","process","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59b93831.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst Voltar = () => {\n    return (<Link className=\"voltar\" to=\"/\">voltar</Link>)\n}\n\nexport default Voltar","import React from 'react'\n\nconst Screen = (props) => {\n    return (<div className='monitor'>\n        <div className=\"appScreen\">{props.children}</div>\n    </div>)\n\n}\n\nexport default Screen","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst TitleTime = (props) => {\n    if (props.count == null) { return <Helmet><title>Digdin Time</title></Helmet> }\n    else return (<Helmet>\n        <title>\n            {props.convertTime(props.count).hour < 10\n                ? `0${props.convertTime(props.count).hour} :`\n                : `${props.convertTime(props.count).hour} :`}\n            {props.convertTime(props.count).minute < 10\n                ? `0${props.convertTime(props.count).minute} :`\n                : `${props.convertTime(props.count).minute} :`}\n            {props.convertTime(props.count).second < 10\n                ? `0${props.convertTime(props.count).second}`\n                : `${props.convertTime(props.count).second}`}\n\n        </title>\n    </Helmet>)\n}\n\nexport default TitleTime","import React, { useState, useEffect } from \"react\";\nimport Voltar from '../Voltar'\nimport \"./style.css\"\nimport Screen from '../../Components/Screen'\nimport TitleTime from \"../TitleTime\"\n\n\n\nconst Countdown = () => {\n  const initialState = 0;\n  const initialInput = { hour: 0, minute: 0, second: 0 };\n\n  const [inputControl, setInputControl] = useState(initialInput);\n  const [count, setCount] = useState(initialState);\n  const [status, setStatus] = useState(false);\n  const [pause, setPause] = useState(false);\n\n  useEffect(() => {\n    const constConvert = { hour: 3600000, minute: 60000, second: 1000 };\n\n    if (status && pause) {\n      setTimeout(() => setCount(count - 10), 10);\n    } else if (!status) {\n      const totalTime =\n        inputControl.second * constConvert.second +\n        inputControl.minute * constConvert.minute +\n        inputControl.hour * constConvert.hour;\n      setCount(totalTime);\n    }\n  }, [status, count, inputControl, pause]);\n\n  const convertTime = (count) => {\n\n    const constConvert = { hour: 3600000, minute: 60000, second: 1000 }\n\n    const timeCon = { hour: 0, minute: 0, second: 0, milisecond: 0 }\n\n    timeCon.hour = Math.floor(count / constConvert.hour);\n    timeCon.minute = Math.floor((count - timeCon.hour * constConvert.hour) / constConvert.minute);\n    timeCon.second = Math.floor((count - timeCon.hour * constConvert.hour - timeCon.minute * constConvert.minute) / constConvert.second);\n    timeCon.milisecond = Math.floor(count - timeCon.hour * constConvert.hour - timeCon.minute * constConvert.minute - timeCon.second * constConvert.second);\n    return timeCon;\n  }\n\n  const handleTime = ({ target }) => {\n    const { name, value } = target;\n    setInputControl({ ...inputControl, [name]: Number(value) });\n  };\n\n  return (\n    <Screen>\n      <TitleTime count={count} convertTime={convertTime} />\n      <Voltar />\n      <div className=\"SelectCountDown\">\n        <div className=\"timerCountDown\">\n          <div>\n            {convertTime(count).hour > 0 && <h1>{convertTime(count).hour}:</h1>}\n            <h1>{convertTime(count).minute < 10\n              ? '0' + convertTime(count).minute + \":\"\n              : convertTime(count).minute + \":\"}</h1>\n\n            <h1>{convertTime(count).second < 10\n              ? '0' + convertTime(count).second\n              : convertTime(count).second}</h1>\n          </div>\n          <p>{convertTime(count).milisecond === 0\n            ? '000'\n            : convertTime(count).milisecond < 100\n              ? '0' + convertTime(count).milisecond\n              : convertTime(count).milisecond}\n          </p>\n        </div>\n\n        <div className=\"inputTime\">\n\n          {status\n            ? <h1 className=\"tooltip\">contando...</h1>\n            : <>\n              <input\n                value={inputControl.hour}\n                type=\"text\"\n                placeholder=\"H\"\n                name=\"hour\"\n                maxlength=\"2\"\n                onChange={handleTime}\n              />\n              <input\n                value={inputControl.minute}\n                type=\"text\"\n                placeholder=\"M\"\n                name=\"minute\"\n                maxlength=\"2\"\n                onChange={handleTime}\n              />\n              <input\n                value={inputControl.second}\n                type=\"text\"\n                placeholder=\"S\"\n                name=\"second\"\n                maxlength=\"2\"\n                onChange={handleTime}\n              /></>}\n\n\n        </div>\n        <div>\n          <button\n            className=\"btnfix\"\n            onClick={() => {\n              setStatus(true);\n              setPause(!pause);\n            }}\n          >\n            {pause ? 'Parar' : 'Iniciar'}\n          </button>\n          <button onClick={() => {\n            setStatus(false)\n            setPause(false)\n          }}>\n            Redefinir\n        </button>\n        </div>\n      </div>\n    </Screen>\n    //   <div>\n    //     <h1>{convertTime(count).hour}</h1>\n    //     <h1>{convertTime(count).minute}</h1>\n    //     <h1>{convertTime(count).second}</h1>\n    //     <p>{convertTime(count).milisecond}</p>\n    //     <input\n    //       type=\"number\"\n    //       placeholder=\"Hour\"\n    //       name=\"hour\"\n    //       max=\"24\"\n    //       min=\"0\"\n    //       onChange={handleTime}\n    //     />\n    //     <input\n    //       type=\"number\"\n    //       placeholder=\"Minute\"\n    //       name=\"minute\"\n    //       max=\"59\"\n    //       min=\"0\"\n    //       onChange={handleTime}\n    //     />\n    //     <input\n    //       type=\"number\"\n    //       placeholder=\"Second\"\n    //       name=\"second\"\n    //       max=\"59\"\n    //       min=\"0\"\n    //       onChange={handleTime}\n    //     />\n    //     <button\n    //       onClick={() => {\n    //         setStatus(true);\n    //         setPause(!pause);\n    //       }}\n    //     >\n    //       {pause ? 'Parar': 'Iniciar'}\n    //     </button>\n    //     <button onClick={() => {\n    //       setStatus(false)\n    //       setPause(false)\n    //       }}>\n    //         Resetar\n    //     </button>\n    //     <Link to=\"/\">Voltar</Link>\n    //   </div>\n  );\n};\n\nexport default Countdown;\n","import CountDown from '../../Components/CountDown'\n\nconst CountdownPage = () => {\n  return (\n    <div><CountDown /></div>\n  )\n}\n\nexport default CountdownPage","export default __webpack_public_path__ + \"static/media/logo.c189a21e.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Screen from '../../Components/Screen'\nimport logo from '../../img/logo.svg'\nimport TitleTime from \"../../Components/TitleTime\"\n\nimport './style.css'\n\nconst SelectPage = () => {\n  return (\n    <Screen>\n      <TitleTime count={null} />\n\n      <div className=\"SelectPage_menu\">\n        <img src={logo} />\n        <div>\n          <Link className=\"button\" to=\"/stopwatch\">Stopwatch</Link>\n          <Link className=\"button\" to=\"/countdown\">CountDown</Link>\n        </div>\n      </div>\n    </Screen>\n  );\n};\n\nexport default SelectPage;\n","import React, { useState, useEffect } from 'react'\nimport Voltar from '../Voltar'\n\nimport Screen from '../../Components/Screen'\nimport './style.css'\nimport TitleTime from \"../TitleTime\"\n\nconst Stopwatch = () => {\n\n  const [shouldStart, setShouldStart] = useState(false);\n  const [count, setCount] = useState(0);\n  const [intervalID, setIntervalID] = useState(0);\n  const [notRunning, setNotRunning] = useState(true);\n  useEffect(() => {\n    if (shouldStart) {\n      setIntervalID(setInterval(() => setCount(count => count + 10), 10));\n      setShouldStart(false);\n      setNotRunning(false);\n    }\n  }, [shouldStart, intervalID]);\n  const startCount = () => notRunning && setShouldStart(true);\n\n  const pauseCount = () => {\n    clearInterval(intervalID);\n    setNotRunning(true);\n  };\n\n  const stopCount = () => {\n    clearInterval(intervalID);\n    setCount(0);\n    setNotRunning(true);\n  };\n\n  const convertTime = (count) => {\n\n    const constConvert = { hour: 3600000, minute: 60000, second: 1000 }\n\n    const timeCon = { hour: 0, minute: 0, second: 0, milisecond: 0 }\n\n    timeCon.hour = Math.floor(count / constConvert.hour);\n    timeCon.minute = Math.floor((count - timeCon.hour * constConvert.hour) / constConvert.minute);\n    timeCon.second = Math.floor((count - timeCon.hour * constConvert.hour - timeCon.minute * constConvert.minute) / constConvert.second);\n    timeCon.milisecond = Math.floor(count - timeCon.hour * constConvert.hour - timeCon.minute * constConvert.minute - timeCon.second * constConvert.second);\n    return timeCon;\n  }\n\n  return (\n    <Screen>\n      <TitleTime count={count} convertTime={convertTime} />\n      <Voltar />\n      <div className=\"SelectStopWatch\">\n        <div className=\"timerStopWatch\">\n          <div>\n            {convertTime(count).hour > 0 && <h1>{convertTime(count).hour}:</h1>}\n\n            <h1>{convertTime(count).minute < 10\n              ? '0' + convertTime(count).minute + \":\"\n              : convertTime(count).minute + \":\"}</h1>\n\n            <h1>{convertTime(count).second < 10\n              ? '0' + convertTime(count).second\n              : convertTime(count).second}</h1>\n          </div>\n\n          <p>{convertTime(count).milisecond === 0\n            ? '000'\n            : convertTime(count).milisecond < 100\n              ? '0' + convertTime(count).milisecond\n              : convertTime(count).milisecond}\n          </p>\n        </div>\n        <div>\n\n          {notRunning\n            ? <button className=\"btnfix\" onClick={startCount}>iniciar</button>\n            : <button className=\"btnfix\" onClick={pauseCount}>pausar</button>}\n          <button onClick={stopCount}>\n            resetar\n      </button>\n        </div>\n      </div>\n    </Screen>\n  )\n}\n\nexport default Stopwatch;","import Stopwatch from \"../../Components/StopWatch\"\n\nconst StopwatchPage = () => {\n  return (\n    <Stopwatch />\n  )\n}\n\nexport default StopwatchPage","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport CountdownPage from './Pages/CountdownPage';\nimport SelectPage from './Pages/SelectPage'\nimport StopwatchPage from './Pages/StopWatchPage';\n\nconst Routes = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={SelectPage} />\n      <Route path=\"/stopwatch\" component={StopwatchPage} />\n      <Route path=\"/countdown\" component={CountdownPage} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;","import Routes from \"./routes\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}