{"version":3,"sources":["Pages/CountdownPage/index.jsx","Pages/SelectPage/index.jsx","Components/StopWatch/index.jsx","Pages/StopWatchPage/index.jsx","routes.jsx","App.js","reportWebVitals.js","index.js"],"names":["CountdownPage","SelectPage","to","Stopwatch","useState","count","setCount","status","setStatus","useEffect","setTimeout","convertTime","constConvert","timeCon","hour","minute","second","milisecond","Math","floor","onClick","StopwatchPage","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAMeA,EANO,WACpB,OACE,6CCUWC,EATI,WACjB,OACE,qCACE,cAAC,IAAD,CAAMC,GAAG,aAAT,uBACA,cAAC,IAAD,CAAMA,GAAG,aAAT,2B,QCoCSC,EAxCG,WAEhB,IAFsB,EAIIC,mBAFL,GAFC,mBAIfC,EAJe,KAIRC,EAJQ,OAKMF,oBAAS,GALf,mBAKfG,EALe,KAKPC,EALO,KAOtBC,qBAAU,WACLF,GACDG,YAAW,kBAAMJ,EAASD,EAAM,MAAK,MAEtC,CAACE,EAAQF,IAEZ,IAAMM,EAAc,SAACN,GAEnB,IAAMO,EAAsB,KAAtBA,EAAuC,IAAvCA,EAAsD,IAEtDC,EAAU,CAACC,KAAM,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,WAAY,GAO5D,OALAJ,EAAQC,KAAOI,KAAKC,MAAMd,EAAQO,GAClCC,EAAQE,OAASG,KAAKC,OAAOd,EAAQQ,EAAQC,KAAOF,GAAqBA,GACzEC,EAAQG,OAASE,KAAKC,OAAOd,EAAQQ,EAAQC,KAAOF,EAAoBC,EAAQE,OAASH,GAAuBA,GAChHC,EAAQI,WAAaC,KAAKC,MAAMd,EAAQQ,EAAQC,KAAOF,EAAoBC,EAAQE,OAASH,EAAsBC,EAAQG,OAASJ,GAE5HC,GAGT,OACE,gCACE,6BAAKF,EAAYN,GAAOS,OACxB,6BAAKH,EAAYN,GAAOU,SACxB,6BAAKJ,EAAYN,GAAOW,SACxB,4BAAIL,EAAYN,GAAOY,aACvB,wBAAQG,QAAS,kBAAMZ,GAAU,IAAjC,qBACA,wBAAQY,QAAS,kBAAMZ,GAAU,IAAjC,mBACA,cAAC,IAAD,CAAMN,GAAG,IAAT,wBC9BSmB,EANO,WACpB,OACE,cAAC,EAAD,KCYWC,EAVA,kBACb,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,cAAC,IAAD,CAAOuB,KAAK,aAAaC,UAAWJ,IACpC,cAAC,IAAD,CAAOG,KAAK,aAAaC,UAAWzB,UCH3B0B,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.823036fb.chunk.js","sourcesContent":["const CountdownPage = () => {\n  return (\n    <div>countdown</div>\n  )\n}\n\nexport default CountdownPage","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst SelectPage = () => {\n  return (\n    <>\n      <Link to=\"/stopwatch\">Stopwatch</Link>\n      <Link to=\"/countdown\">CountDown</Link>\n    </>\n  );\n};\n\nexport default SelectPage;\n","import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom';\n\nconst Stopwatch = () => {\n\n  const initialState = 0\n\n  const [count, setCount] = useState(initialState);\n  const [status, setStatus] = useState(false);\n\n  useEffect(() => {\n    if(status) {\n      setTimeout(() => setCount(count+10), 10)\n    }\n  }, [status, count])\n\n  const convertTime = (count) => {\n\n    const constConvert = {hour: 3600000, minute: 60000, second: 1000}\n\n    const timeCon = {hour: 0, minute: 0, second: 0, milisecond: 0}\n\n    timeCon.hour = Math.floor(count / constConvert.hour);\n    timeCon.minute = Math.floor((count - timeCon.hour * constConvert.hour) / constConvert.minute);\n    timeCon.second = Math.floor((count - timeCon.hour * constConvert.hour - timeCon.minute * constConvert.minute) / constConvert.second);\n    timeCon.milisecond = Math.floor(count - timeCon.hour * constConvert.hour - timeCon.minute * constConvert.minute - timeCon.second * constConvert.second);\n\n    return timeCon;\n  } \n  \n  return (\n    <div>\n      <h1>{convertTime(count).hour}</h1>\n      <h1>{convertTime(count).minute}</h1>\n      <h1>{convertTime(count).second}</h1>\n      <p>{convertTime(count).milisecond}</p>\n      <button onClick={() => setStatus(true)}>Iniciar</button>\n      <button onClick={() => setStatus(false)}>Parar</button>\n      <Link to=\"/\">Voltar</Link>\n    </div>\n  )\n}\n\nexport default Stopwatch;","import Stopwatch from \"../../Components/StopWatch\"\n\nconst StopwatchPage = () => {\n  return (\n    <Stopwatch />\n  )\n}\n\nexport default StopwatchPage","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport CountdownPage from './Pages/CountdownPage';\nimport SelectPage from './Pages/SelectPage'\nimport StopwatchPage from './Pages/StopWatchPage';\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={SelectPage} />\n      <Route path=\"/stopwatch\" component={StopwatchPage} />\n      <Route path=\"/countdown\" component={CountdownPage} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Routes;","import Routes from \"./routes\";\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}